package com.luka5w.gpdiscordbot;

import com.luka5w.gpdiscordbot.config.BotConfig;
import com.luka5w.gpdiscordbot.config.ClientConfig;
import com.luka5w.gpdiscordbot.handler.CommandHandler;
import com.luka5w.gpdiscordbot.handler.LocalizationHandler;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;
import org.javacord.api.DiscordApi;
import org.javacord.api.DiscordApiBuilder;

/**
 * Entry point for the bot
 */
public class Main {

  private static final Logger LOGGER = LogManager.getLogger(Main.class);
  private static String[] VERSION = new String[]{"${version}", "${built-date}", "${built-jdk}"};

  /**
   * Entry point for the program.<br/> When this program accepts arguments, they must be listed here
   * with &lt;li&gt; elements.
   *
   * @param args ignored
   */
  public static void main(String[] args) {
    // read version file (autogenerated by gradle
    try (InputStream is = Main.class.getClassLoader().getResourceAsStream("version.txt")) {
      assert is != null;
      VERSION = new String(is.readAllBytes(), StandardCharsets.UTF_8).split("\n");
      assert VERSION.length == 3;
    } catch (Exception e) {
      throw new RuntimeException("Unable to read version file", e);
    }
    // update log level
    Configurator.setRootLevel(Level.getLevel(BotConfig.Logger.LEVEL));
    // debug info
    LOGGER.info("GPDiscordBot {} (Built {} with JDK {})", getVersion(), getBuildDate(),
        getCompileVersion());
    LOGGER.info("Logging Level: {}", BotConfig.Logger.LEVEL);
    LOGGER.info("Loaded {} translations", LocalizationHandler.size());
    // init api, log in
    LOGGER.info("Initializing Bot...");
    DiscordApi api = new DiscordApiBuilder()
        .setToken(ClientConfig.TOKEN)
        .addSlashCommandCreateListener(CommandHandler::onSlashCommandCreate)
        .login().join();
    LOGGER.info("Logged in as {} (Owner: {})", api.getYourself().getDiscriminatedName(),
        api.getCachedApplicationInfo().getOwner().orElseThrow().getDiscriminatedName());
    // register slash commands
    CommandHandler.registerCommands(api);
  }

  /**
   * Returns the version of this program. The method exists for the reason that {@link #VERSION}
   * can't be marked as final but shouldn't be modifiable.
   *
   * @return The version of this program
   */
  public static String getVersion() {
    return VERSION[0];
  }

  /**
   * Returns the version of this program. The method exists for the reason that {@link #VERSION}
   * can't be marked as final but shouldn't be modifiable.
   *
   * @return The version of this program
   */
  public static Instant getBuildDate() {
    return Instant.ofEpochMilli(Long.parseLong(VERSION[1]));
  }

  /**
   * Returns the JDK version this program was compiled with. The method exists for the reason that
   * {@link #VERSION} can't be marked as final but shouldn't be modifiable.
   *
   * @return The JDK version this program was compiled with
   */
  public static String getCompileVersion() {
    return VERSION[2];
  }
}